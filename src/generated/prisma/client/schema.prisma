// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client"
}

model Event {
  id          String        @id @default(uuid())
  title       String
  text        String
  variants    Variant[]
  eventExtras EventExtras[]

  startsAt DateTime  @default(now())
  endsAt   DateTime?

  enabled Boolean @default(false)

  // To return `Date`s intact through the API we use transformers
  // https://trpc.io/docs/v11/data-transformers
  // This is unique so it can be used for cursor-based pagination
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Order     Order[]
}

model Variant {
  id       String @id @default(uuid())
  title    String
  stock    Int
  price    Float
  currency String
  order    Int    @default(autoincrement())

  event   Event   @relation(fields: [eventId], references: [id])
  eventId String
  Order   Order[]
}

model EventExtras {
  id    String @id @default(uuid())
  title String

  price    Float?
  currency String?

  multiple      Boolean @default(false)
  multipleLimit Int?

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

enum OrderStatus {
  RESERVED
  CONFIRMED
  CANCELLED
  EXPIRED
}

model Order {
  id                    String  @id @default(uuid())
  externalId            String?
  externalTransactionId String?

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int

  status OrderStatus

  selectedExtras Json
  items          Json
  customer       Json
  error          Json?

  amount   Int
  currency String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
